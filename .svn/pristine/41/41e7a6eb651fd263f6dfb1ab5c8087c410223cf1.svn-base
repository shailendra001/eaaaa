//
//  ViewController.m
//  EastonArtGalleries
//
//  Created by Sandeep Kumar on 11/05/16.
//  Copyright Â© 2016 infoicon. All rights reserved.
//

#import "ViewController.h"
#import "ArtCollectionViewController.h"
#import "BestSellingArtistsViewController.h"
#import "AboutUsViewController.h"
#import "ContactUsViewController.h"
//#import "MSSTabNavigationBar.h"
#import "OrderDetailViewController.h"


#define COLOR_CELL_BACKGROUND   @"#DEDEDD"
#define COLOR_CELL_TEXT         @"#575656"



@interface ViewController ()<UITableViewDelegate,UITableViewDataSource,FPPopoverControllerDelegate,buttontitledelgate,PopupDelegate>
{
        BOOL isSlider;
        NSArray* arrSlider;
        NSTimer *timerImg;
        NSInteger imageOrignal;
        NSArray *animationImages;
        NSArray* arrItems;
        NSArray* arrItemsData;
        NSDictionary *resPonsedataArray;
        int count;
        BOOL isMenu;
        FPPopoverKeyboardResponsiveController *popover;
        DemoTableController *tableSuggesstionDictionary;

        ///
        Popup* popper;
        PopupBackGroundBlurType blurType;
        PopupIncomingTransitionType incomingType;
        PopupOutgoingTransitionType outgoingType;
        NSArray *keyboardTypes;
        NSArray *incomingTypes;
        NSArray *outgoingTypes;
        
        BOOL isEmailSubscribe;
        NSString* subscribeEmail;
        DataBaseHandler *dataManager;
        UIView* cardViewGlobal;
        UIView* cardCountViewGlobal;
}

@end

@implementation ViewController


#pragma mark - View controller life cicle

- (void)viewDidLoad {
        [super viewDidLoad];

        [self config];
        
        [self setLogoImage];
        
        [self navigationBarConfiguration];
        
        [self getSliderWebService];
        
        [self setSlider];
        
        [self rightNavBarConfiguration];
        
        
        
        [self setNeedsStatusBarAppearanceUpdate];
}

-(void)viewWillAppear:(BOOL)animated{
        [super viewWillAppear:animated];
        
        [self.viewDeckController setLeftLedge:65];
        
        //self.title =@"Home";
        
        [self imageAnimation];
        
        [self loadCardCount];
        
#if IS_UNITY_USE
//        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t) (1* NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
//                [self hideUnityButton];
//        });
#endif
        
        
        
}

-(void)viewDidAppear:(BOOL)animated{
        
        [super viewDidAppear:animated];
        
        [self.viewDeckController closeLeftViewAnimated:NO];
        
}

- (void)didReceiveMemoryWarning {
        [super didReceiveMemoryWarning];
        // Dispose of any resources that can be recreated.
}

- (UIStatusBarStyle)preferredStatusBarStyle{
        return UIStatusBarStyleLightContent;
}

#pragma mark - Custom Methods

-(void)config{
        
        dataManager = [[DataBaseHandler alloc] initWithDB:DATABASE_NAME];
        
        self.pageController.numberOfPages=0;
        
        
        
        arrItems = @[
                     @"Latest arts",
                     @"Bestseller arts",
                     @"Special",
                     @"Best selling artists",
                     @"Top new arrivals this week",
                     @"Contact us",
                     @"About us"];
        
        arrItemsData = @[
                         @"latestArt",
                         @"bestSellerArt",
                         @"special",
                         @"bestSellerArtist",
                         @"newArrival",
                         @"contact",
                         @"About"];
        
        self.imgViSliderImage.image=nil;
        self.imgViSliderImage.backgroundColor=[UIColor whiteColor];
        
        self.tableView.delegate=self;
        self.tableView.dataSource=self;
        
        self.tableView.tableFooterView=[[UIView alloc]init];
        self.tableView.backgroundColor=[Alert colorFromHexString:COLOR_CELL_BACKGROUND];
        self.lblSeperatorLine.backgroundColor=[Alert colorFromHexString:COLOR_CELL_BACKGROUND];
        
        [self.tableView reloadData];
        
#if SHADOW_ENABLE
        
        [Alert setShadowOnViewAtTop:self.viContainerBottom];
        
#endif

}

-(void)setLogoImage{
        UIImage* logoImage = [UIImage imageNamed:LOGO_IMAGE];
        UIImageView* imgLogo=[[UIImageView alloc] initWithImage:logoImage];
        imgLogo.frame=CGRectMake(0, 0, 49, 44);
        
        UIView* logoView=[[UIView alloc]initWithFrame:imgLogo.frame];
        [logoView addSubview:imgLogo];
        
        self.navigationItem.titleView =logoView;
}

-(void)rightNavBarConfiguration{
        
        //Search icon
        UIImageView*searchImageView=[[UIImageView alloc]initWithFrame:CGRectMake(5, 5, 20, 20)];
        searchImageView.image=[UIImage imageNamed:@"search_icon.png"];
        
        UIButton*searchButton  = [ZFRippleButton buttonWithType:UIButtonTypeSystem];
        searchButton.frame = CGRectMake(0, 0, 30, 30);
        searchButton.layer.cornerRadius=searchButton.frame.size.width/2;
        [searchButton addTarget:self action:@selector(search:) forControlEvents:UIControlEventTouchUpInside];
        
        UIView* searchView=[[UIView alloc]initWithFrame:CGRectMake(0, 5, 30, 30)];
        searchView.backgroundColor=[UIColor clearColor];
        [searchView addSubview:searchImageView];
        [searchView addSubview:searchButton];
        
        //User icon
        
        UIImageView* userImageView=[[UIImageView alloc]initWithFrame:CGRectMake(5, 5, 20, 20)];
        userImageView.image=[UIImage imageNamed:@"user_icon.png"];
        
        
        UIButton * userButton  = [ZFRippleButton buttonWithType:UIButtonTypeSystem];
        userButton.frame = CGRectMake(0, 0, 30, 30);
        userButton.layer.cornerRadius=userButton.frame.size.width/2;
        [userButton addTarget:self action:@selector(user:) forControlEvents:UIControlEventTouchUpInside];
        
        UIView* userView=[[UIView alloc]initWithFrame:CGRectMake(30, 5, 30, 30)];
        userView.backgroundColor=[UIColor clearColor];
        [userView addSubview:userImageView];
        [userView addSubview:userButton];

        //Card icon
        UIImageView* cardImageView=[[UIImageView alloc]initWithFrame:CGRectMake(5, 5, 20, 20)];
        cardImageView.image=[UIImage imageNamed:@"cart_icon.png"];
        
        
        UIButton * cardButton  = [ZFRippleButton buttonWithType:UIButtonTypeSystem];
        cardButton.frame = CGRectMake(0, 0, 30, 30);
        cardButton.layer.cornerRadius=cardButton.frame.size.width/2;
        [cardButton addTarget:self action:@selector(card:) forControlEvents:UIControlEventTouchUpInside];
        
        UIView* cardView=[[UIView alloc]initWithFrame:CGRectMake(60, 5, 30, 30)];
        cardView.backgroundColor=[UIColor clearColor];
        [cardView addSubview:cardImageView];
        [cardView addSubview:cardButton];
        [cardView insertSubview:cardImageView atIndex:0];
        [cardView insertSubview:cardButton atIndex:2];
        
        cardViewGlobal=cardView;
        
        
        //Card icon
        UIImageView* dotImageView=[[UIImageView alloc]initWithFrame:CGRectMake(13, 6, 3, 20)];
        dotImageView.image=[UIImage imageNamed:@"dotted_menu_icon.png"];
        
        
        UIButton * dotButton  = [ZFRippleButton buttonWithType:UIButtonTypeSystem];
        dotButton.frame = CGRectMake(0, 0, 30, 30);
        dotButton.layer.cornerRadius=cardButton.frame.size.width/2;
        [dotButton addTarget:self action:@selector(dot:) forControlEvents:UIControlEventTouchUpInside];
        
        UIView* dotView=[[UIView alloc]initWithFrame:CGRectMake(90, 5, 30, 30)];
        dotView.backgroundColor=[UIColor clearColor];
        [dotView addSubview:dotImageView];
        [dotView addSubview:dotButton];

        
        
        UIView* rightView=[[UIView alloc]initWithFrame:CGRectMake(0, 0, 120, 40)];
        rightView.backgroundColor=[UIColor clearColor];
        
        [rightView addSubview:searchView];
        [rightView addSubview:userView];
        [rightView addSubview:cardView];
        [rightView addSubview:dotView];
        
        UIBarButtonItem *rightBarItem = [[UIBarButtonItem alloc] initWithCustomView:rightView];
        
        [rightView alignmentRectInsets];
        
        
        //        UIBarButtonItem *closeBarItem = [[UIBarButtonItem alloc] initWithCustomView:closeButton];
        //
        //        UIBarButtonItem *sortBarItem = [[UIBarButtonItem alloc] initWithCustomView:sortButton];
        
        
        self.navigationItem.rightBarButtonItem = rightBarItem;//@[closeBarItem,sortBarItem];
}

-(NSInteger)getCardCount{
        
        NSArray* arrCard=[dataManager getCardDetails];
        
        return  arrCard ? arrCard.count : 0;
}

-(void)loadCardCount{
        
        [self removeCardCount];
        
        NSInteger cartCount=[self getCardCount];
        
        UIView* cardCountView=[[UIView alloc]initWithFrame:CGRectMake(cardViewGlobal.frame.size.width-17,
                                                                      2,
                                                                      15,
                                                                      15)];
        UILabel* lblcount=[[UILabel alloc]initWithFrame:cardCountView.bounds];
        lblcount.text = [NSString stringWithFormat:@"%lu",(long)cartCount];
        lblcount.textColor = [UIColor whiteColor];
        lblcount.backgroundColor = [UIColor clearColor];
        lblcount.numberOfLines = 0;
        lblcount.textAlignment = NSTextAlignmentCenter;
        lblcount.font=[UIFont fontWithName:FONT_MONTSERRAT_SEMIBOLD size:9];

        [cardCountView addSubview:lblcount];
        
        cardCountView.backgroundColor=[UIColor redColor];
        cardCountView.layer.cornerRadius=cardCountView.frame.size.width/2;
        cardCountView.layer.borderWidth=1.5;
        cardCountView.layer.borderColor=[UIColor whiteColor].CGColor;
        cardCountView.layer.masksToBounds=YES;
        cardCountView.hidden=cartCount ? NO: YES;
        cardCountViewGlobal=cardCountView;
        [cardViewGlobal addSubview:cardCountView];
        [cardViewGlobal insertSubview:cardCountView atIndex:1];
        
        
//#if SHADOW_ENABLE
//        [Alert setShadowOnView:cardCountView];
//        
//#endif
        
        
        
        
        
}

-(void)removeCardCount{
        
        for (id view in cardViewGlobal.subviews) {
                
                if(![view isKindOfClass:[UIImageView class]] && ![view isKindOfClass:[UIButton class]] )
                        [view removeFromSuperview];
        }
}


#pragma mark -Get Action from right nav buttons

-(IBAction)search:(id)sender{
        
        NSString *urlString = JOIN_STRING(kPrefixUrl, kURL_Artist);
        NSMutableDictionary* data=[NSMutableDictionary dictionary];
        [data setObject:@"artist" forKey:@"page"];
        
        BestSellingArtistsViewController* vc=GET_VIEW_CONTROLLER(kBestSellingArtistsViewController);
        vc.urlString=urlString;
        vc.urlData=[data mutableCopy];
        vc.dataAccesskey=@"Artist";
        vc.titleString=@"Search Your Favorite Artist";
        vc.isSearchArtist=YES;
        vc.from=@"back";
        MOVE_VIEW_CONTROLLER_VIEW_DECK(vc);
        
}

-(IBAction)user:(id)sender{
        
        if([[EAGallery sharedClass]isLogin]){
                if([self.navigationController.visibleViewController isKindOfClass:[DashboardViewController class]]) return;
                
                DashboardViewController*vc=GET_VIEW_CONTROLLER(kDashboardViewController);
                vc.titleString=@"Dashboard";
                
                MOVE_VIEW_CONTROLLER_VIEW_DECK(vc);
                
        }
        else{
                if([self.navigationController.visibleViewController isKindOfClass:[LoginViewController class]]) return;
                
                LoginViewController*vc=GET_VIEW_CONTROLLER(kLoginViewController);
                vc.titleString=@"Login";
                
                MOVE_VIEW_CONTROLLER_VIEW_DECK(vc);
        }
        
        
}

-(IBAction)card:(id)sender{
        
        if([self.navigationController.visibleViewController isKindOfClass:[CardDetailViewController class]]) return;
        
        CardDetailViewController*vc=GET_VIEW_CONTROLLER(kCardDetailViewController);
        vc.titleString=@"Your Cart";
        vc.from=@"back";
        MOVE_VIEW_CONTROLLER_VIEW_DECK(vc);
        
}

-(IBAction)dot:(id)sender{

        [[EAGallery sharedClass]popover:sender vc:self];

}

/*
#pragma mark - Pop Menu

- (void)optionNavButtonActionForDotMenu:(id)sender {
        
        
        if(isMenu){
                [KxMenu dismissMenu];
        }
        else{
                UIButton* button=(UIButton*)sender;
                NSMutableArray* arrMenuItems=[[NSMutableArray alloc]init];
                
                [arrMenuItems addObject:[KxMenuItem menuItem:@"Login"
                                                       image:[UIImage imageNamed:@""]
                                                      target:self
                                                      action:@selector(login:)]];
                
                [arrMenuItems addObject:[KxMenuItem menuItem:@"Sign up"
                                                       image:[UIImage imageNamed:@""]
                                                      target:self
                                                      action:@selector(signup:)]];
                
                //                [arrMenuItems addObject:[KxMenuItem menuItem:@"Alarm"
                //                                                       image:[UIImage imageNamed:@""]
                //                                                      target:self
                //                                                      action:@selector(reminderNavButtonAction)]];
                
                
                
                KxMenuItem *first1 = arrMenuItems[0];
                KxMenuItem *first2 = arrMenuItems[1];
                //                KxMenuItem *first3 = arrMenuItems[2];
                //                KxMenuItem *first4 = arrMenuItems[3];
                first1.alignment =
                first2.alignment= NSTextAlignmentLeft;
                
                [KxMenu showMenuInView:self.view
                              fromRect:button.frame
                             menuItems:arrMenuItems];
                
                NSLog(@"menuItems =%@",arrMenuItems);
        }
        isMenu=!isMenu;
        
}

-(IBAction)login:(id)sender{
        isMenu=!isMenu;
}

-(IBAction)signup:(id)sender{
        isMenu=!isMenu;
}
*/

-(void)setSlider{
        
        [self.imgViSliderImage setUserInteractionEnabled:YES];
        UISwipeGestureRecognizer *swipeLeft = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(handleSwipeLeft:)];
        UISwipeGestureRecognizer *swipeRight = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(handleSwipeRight:)];
        
        // Setting the swipe direction.
        [swipeLeft setDirection:UISwipeGestureRecognizerDirectionLeft];
        [swipeRight setDirection:UISwipeGestureRecognizerDirectionRight];
        
        // Adding the swipe gesture on image view
        [self.imgViSliderImage addGestureRecognizer:swipeLeft];
        [self.imgViSliderImage addGestureRecognizer:swipeRight];
//        self.backgroundColor = [[UIColor blackColor]colorWithAlphaComponent:0.5f];
        
        count=0;
}

-(void)handleSwipeLeft:(id)sender{
        [self setCoundwonTimer:0];
        [self performSelector:@selector(resumeTimer) withObject:self afterDelay:1.0];
        if(imageOrignal < arrSlider.count-1)
        {
                imageOrignal++;
                self.pageController.currentPage=imageOrignal;
                UIImageView *moveIMageView = self.imgViSliderImage;
                [self addAnimationPresentToView:moveIMageView];
                [self changeImage];
                
                
        }
}

-(void)handleSwipeRight:(id)sender{
        [self setCoundwonTimer:0];
        [self performSelector:@selector(resumeTimer) withObject:self afterDelay:1.0];
        if(imageOrignal > 0)
        {
                imageOrignal--;
                self.pageController.currentPage=imageOrignal;
                
                UIImageView *moveIMageView =self.imgViSliderImage;
                [self addAnimationPresentToViewOut:moveIMageView];
                [self changeImage];
                
                
                
        }
}

-(void)changeImage{
        if (imageOrignal < [arrSlider count])
        {
                self.pageController.numberOfPages=[arrSlider count];
                self.pageController.currentPage = imageOrignal;
                
                
                NSString *url=[[arrSlider objectAtIndex:imageOrignal] objectForKey:@"slider_image"];
                UIImage* imgplaceholder=[UIImage imageNamed:@"slider-noimg.jpg"];
                __weak UIImageView *weakImgPic = self.imgViSliderImage;
                
                [self.imgViSliderImage setImageWithURL:[NSURL URLWithString:url]
                                      placeholderImage:imgplaceholder success:^(NSURLRequest *request, NSHTTPURLResponse *response, UIImage *image) {
                                              
                                              UIImageView *strongImgPic = weakImgPic;
                                              if (!strongImgPic) return;
                                              
                                              [UIView transitionWithView:strongImgPic
                                                                duration:0.3
                                                                 options:UIViewAnimationOptionTransitionCrossDissolve
                                                              animations:^{
                                                                      strongImgPic.image=image;
                                                              }
                                                              completion:NULL];

                                              
                                      } failure:nil];
                
                
                if(self.imgViSliderImage.image!=nil){
                        for (id view in self.viContainerImageSlider.subviews) {
                                
                                if([view isKindOfClass:[UIActivityIndicatorView class]])
                                        [view removeFromSuperview];
                        }
                }
                
                
                
                
        }
        
}

- (void)addAnimationPresentToView:(UIImageView *)viewTobeAnimated{
        CATransition *transition = [CATransition animation];
        transition.duration = 0.30;
        transition.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
        [transition setValue:@"IntroSwipeIn" forKey:@"IntroAnimation"];
        transition.fillMode=kCAFillModeForwards;
        transition.type = kCATransitionPush;
        transition.subtype =kCATransitionFromRight;
        [viewTobeAnimated.layer addAnimation:transition forKey:nil];
        
}

- (void)addAnimationPresentToViewOut:(UIImageView *)viewTobeAnimated{
        CATransition *transition = [CATransition animation];
        transition.duration = 0.30;
        transition.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
        [transition setValue:@"IntroSwipeIn" forKey:@"IntroAnimation"];
        transition.fillMode=kCAFillModeForwards;
        transition.type = kCATransitionPush;
        transition.subtype =kCATransitionFromLeft;
        [viewTobeAnimated.layer addAnimation:transition forKey:nil];
        
}

#pragma mark -
#pragma mark - ======: Show Image Animation :=====

-(void)imageAnimation{
        imageOrignal = 0;
        [timerImg invalidate];
        
        [self performTransition];
        
        // Set the timer for image transition fired
        timerImg=[NSTimer scheduledTimerWithTimeInterval:4.5 target:self selector:@selector(performTransition) userInfo:nil repeats:YES];
        
}

-(void)performTransition{
        
        
        
        imageOrignal++;
        
        if(imageOrignal >= [arrSlider count])  imageOrignal = 0;
        self.pageController.numberOfPages=[arrSlider count];
        self.pageController.currentPage = imageOrignal;
        arrSlider=arrSlider ? arrSlider : nil;
        
        
        [self setImageWithSlider:arrSlider index:(int)imageOrignal];
        
        CATransition *transition = [CATransition animation];
        transition.duration = 0.75;
        transition.delegate = self;
        transition.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
        
        NSString *types[4] = {kCATransitionMoveIn, kCATransitionPush, kCATransitionReveal, kCATransitionFade};
        NSString *subtypes[4] = {kCATransitionFromLeft, kCATransitionFromRight, kCATransitionFromTop, kCATransitionFromBottom};
        int rnd = random() % 4;
        transition.type = types[rnd];
        if(rnd > 3)
        {
                transition.subtype = subtypes[random() % 4];
        }
        [self.imgViSliderImage.layer addAnimation:transition forKey:nil];
        
        
}

-(void)setImageWithSlider:(NSArray*)arr index:(int)index{
        NSURL* url;
        if(arr.count){
                NSDictionary* info=arr[index];
                url=[NSURL URLWithString:[info objectForKey:@"slider_image"]];
        }
        else
                
                url=nil;
        //    [self.imgviProfilePic setImageWithURL:url placeholderImage:imgPlaceHolder];
        //        UIImage*imgPlaceHolder=[UIImage imageNamed:@"user_pic.png"];
        
        for (id view in self.viContainerImageSlider.subviews) {
                
                if([view isKindOfClass:[UIActivityIndicatorView class]])
                        [view removeFromSuperview];
        }

        
        UIActivityIndicatorView *activityIndicator = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
        activityIndicator.frame = CGRectMake(self.imgViSliderImage.frame.size.width/2-15,
                                             self.imgViSliderImage.frame.size.height/2-15,
                                             30,
                                             30);
        [activityIndicator startAnimating];
        activityIndicator.tag=imageOrignal;
        
        [activityIndicator removeFromSuperview];
        if(self.imgViSliderImage.image==nil){
                [self.viContainerImageSlider addSubview:activityIndicator];
                [self.viContainerImageSlider insertSubview:activityIndicator aboveSubview:self.imgViSliderImage];
        }
        
        UIImage* imgplaceholder=[UIImage imageNamed:@"slider-noimg.jpg"];
        __weak UIImageView *weakImgPic = self.imgViSliderImage;
        [self.imgViSliderImage setImageWithURL:url
                      placeholderImage:imgplaceholder
                               success:^(NSURLRequest *request, NSHTTPURLResponse *response, UIImage *image )
         {
                 UIImageView *strongImgPic = weakImgPic;
                 if (!strongImgPic) return;
                 
                 [activityIndicator stopAnimating];
                 [activityIndicator removeFromSuperview];
                 
                 [UIView transitionWithView:strongImgPic
                                   duration:0.3
                                    options:UIViewAnimationOptionTransitionCrossDissolve
                                 animations:^{
                                         strongImgPic.image=image;
                                 }
                                 completion:NULL];
                 
         } failure:NULL];
        
        /*
         [Alert downloadImageWithURL:url completionBlock:^(BOOL succeeded, UIImage *image) {
         
         if (succeeded) {
         
         
         [UIView transitionWithView:bannerImgView
         duration:0.3
         options:UIViewAnimationOptionTransitionCrossDissolve
         animations:^{
         [bannerImgView setImage:image];
         }
         completion:NULL];
         }
         }];
         */
}

-(void)setCoundwonTimer:(int) interval{
        if (timerImg && [timerImg isValid]) {
                [timerImg invalidate];
                timerImg = NULL;
        }
        
        
        if (interval > 0) {
                NSTimer *timer = [NSTimer scheduledTimerWithTimeInterval:interval
                                                                  target:self
                                                                selector:@selector(performTransition)
                                                                userInfo:nil
                                                                 repeats:YES];
                timerImg = timer;
        }
        
        
}

-(void)resumeTimer{
        
        [self setCoundwonTimer:4.5];
}


-(UIImage*)setNavBarImage{
        
        UIImage* result;
        UIImage* image=[Alert imageFromColor:[UIColor blackColor]];

        
        if (IS_IPHONE_4){
                
                
                CGRect rect = CGRectMake(0,0,320,44);
                UIImage *img=[Alert imageResize:rect image:image];//[UIImage imageNamed:@"nav_mage.png"]
                result=img;
        }
        else{
                CGRect rect = CGRectMake(0,0,320,88);
                UIImage *img=[Alert imageResize:rect image:image];//[UIImage imageNamed:@"nav_mage.png"]
                result=img;
        }
        
        return result;

}

#pragma Mark Navigation Bar Configuration Code

-(void)navigationBarConfiguration{
        //    [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];
        [self.navigationController.navigationBar setBackgroundImage:[self setNavBarImage]
                                                      forBarMetrics:UIBarMetricsDefault];
        UIButton * menuButton  = [UIButton buttonWithType:UIButtonTypeSystem];
        menuButton.frame = CGRectMake(8, 20, 24, 18);
        [menuButton setBackgroundImage:[UIImage imageNamed:MENU_IMAGE] forState:UIControlStateNormal];
        
        //    [menuButton addTarget:self.revealViewController action:@selector(revealToggle:) forControlEvents:UIControlEventTouchUpInside];
        [menuButton addTarget:self.viewDeckController action:@selector(toggleLeftView) forControlEvents:UIControlEventTouchUpInside];
        
        UIBarButtonItem *accountBarItem = [[UIBarButtonItem alloc] initWithCustomView:menuButton];
        
        self.navigationItem.leftBarButtonItem = accountBarItem;
        //[self.navigationController.navigationBar addGestureRecognizer:self.revealViewController.panGestureRecognizer];
}

#pragma mark -Call WebService for all Home page data

-(void)getSliderWebService{
        
        const char* className=[NSStringFromSelector(_cmd) UTF8String];
        
        dispatch_queue_t myQueue = dispatch_queue_create(className,NULL);
        dispatch_async(myQueue, ^{
                
                
                NSString *urlString = JOIN_STRING(kPrefixUrl, kURL_Slider);
                NSMutableDictionary* data=[NSMutableDictionary dictionary];
                [data setObject:@"home" forKey:@"page"];
                
                NSString *postString =[Alert jsonStringWithDictionary:[data mutableCopy]];
                
               
                NSLog(@" tempURL :%@---",urlString);
                
                NSData *postData = [postString dataUsingEncoding:NSUTF8StringEncoding allowLossyConversion:YES];
               // NSString *postLength = [NSString stringWithFormat:@"%lu",(unsigned long)[postData length]];
                
                NSURL *url = [NSURL URLWithString:urlString];
                
                NSMutableURLRequest *theRequest = [NSMutableURLRequest requestWithURL:url];
                [theRequest setHTTPMethod:@"POST"];
                [theRequest setValue:nil forHTTPHeaderField:@"Content-Length"];
                [theRequest setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
//                NSData *req=[NSData dataWithBytes:[postString UTF8String] length:[postString length]];
                [theRequest setHTTPBody:postData];
                NSData *returnData = [NSURLConnection sendSynchronousRequest:theRequest returningResponse:nil error:nil];
                
                if (returnData == nil)
                {
                        //[self alerMessage];
                }
                else
                {
                        
                        NSDictionary * result =[NSJSONSerialization JSONObjectWithData:returnData
                                                                               options:NSJSONReadingMutableContainers
                                                                                 error:nil];
                        
                        if ([result isKindOfClass:[NSNull class]] ||result == nil)
                        {
                                //[self alerMessage];
                        }
                        else
                        {
                                
                                //NSLog(@"Response : %@", result);
                                NSString *success  = [result valueForKey:@"success"];
                                NSString *error  = [result valueForKey:@"error"];
                                
                                if (success.boolValue) {
                                        
                                        resPonsedataArray = (NSDictionary*)[result valueForKey:@"data"];
                                        
                                        if([resPonsedataArray isKindOfClass:[NSDictionary class]]){
                                                // [self alerWithMessage:[webServiceDic valueForKey:@"msg"]];
                                                
                                                dispatch_async(dispatch_get_main_queue(), ^{
                                                        
                                                        arrSlider=[resPonsedataArray objectForKey:@"sliders"];
                                                        
                                                        
                                                        
                                                        
                                                        
                                                        //[self setSliderData];
                                                });
                                                
                                        }
                                        
                                        
                                }
                                else if (error.boolValue) {
                                        
                                }
                                
                                else{
                                }
                                
                                
                        }
                        
                }
                
        });
        
}


-(void)subscribeWebService{
        
        const char* className=[NSStringFromSelector(_cmd) UTF8String];
        
        dispatch_queue_t myQueue = dispatch_queue_create(className,NULL);
        dispatch_async(myQueue, ^{
                
                
                NSString *urlString = JOIN_STRING(kPrefixUrl, kURL_Subscribe);
                NSMutableDictionary* data=[NSMutableDictionary dictionary];
                [data setObject:subscribeEmail forKey:@"news_letter"];//{"news_letter":"yogesh@gmail.com"}
                
                NSString *postString =[Alert jsonStringWithDictionary:[data mutableCopy]];
                
                
                NSLog(@" tempURL :%@---",urlString);
                
                NSData *postData = [postString dataUsingEncoding:NSUTF8StringEncoding allowLossyConversion:YES];
                // NSString *postLength = [NSString stringWithFormat:@"%lu",(unsigned long)[postData length]];
                
                NSURL *url = [NSURL URLWithString:urlString];
                
                NSMutableURLRequest *theRequest = [NSMutableURLRequest requestWithURL:url];
                [theRequest setHTTPMethod:@"POST"];
                [theRequest setValue:nil forHTTPHeaderField:@"Content-Length"];
                [theRequest setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
                //                NSData *req=[NSData dataWithBytes:[postString UTF8String] length:[postString length]];
                [theRequest setHTTPBody:postData];
                
                dispatch_async(dispatch_get_main_queue(), ^{
                        [[SharedClass sharedObject] addProgressHud:self.navigationController.view];
                        
                });
                
                
                NSData *returnData = [NSURLConnection sendSynchronousRequest:theRequest returningResponse:nil error:nil];
                
                
                if (returnData == nil)
                {
                        dispatch_async(dispatch_get_main_queue(), ^{
                                [[SharedClass sharedObject] hudeHide];
                                [Alert alertWithMessage:@"Network failure ! Please try agian later."
                                             navigation:self.navigationController
                                               gotoBack:NO animation:YES second:2.0];

                                
                        });
                }
                else
                {
                        
                        NSDictionary * result =[NSJSONSerialization JSONObjectWithData:returnData
                                                                               options:NSJSONReadingMutableContainers
                                                                                 error:nil];
                        
                        if ([result isKindOfClass:[NSNull class]] ||result == nil)
                        {
                                dispatch_async(dispatch_get_main_queue(), ^{
                                        [[SharedClass sharedObject] hudeHide];
                                        [Alert alertWithMessage:@"Network failure ! Please try agian later."
                                                     navigation:self.navigationController
                                                       gotoBack:NO animation:YES second:2.0];
                                        

                                        
                                });

                        }
                        else
                        {
                                dispatch_async(dispatch_get_main_queue(), ^{
                                        [[SharedClass sharedObject] hudeHide];
                                        
                                });

                                
                                NSLog(@"Response : %@", result);
                                NSString *success  = [result valueForKey:@"success"];
                                NSString *error  = [result valueForKey:@"error"];
                                
                                dispatch_async(dispatch_get_main_queue(), ^{
                                         [Alert alertWithMessage:[result valueForKey:@"msg"]
                                                      navigation:self.navigationController
                                                        gotoBack:NO animation:YES second:2.0];
                                        
                                });
                                
                                if (success.boolValue) {
                                        
                                }
                                else if (error.boolValue) {
                                }
                                else{
                                }
                                
                                
                        }
                        
                }
                
        });
        
}

#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
        return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
        return arrItems.count;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
        
        return 44.0f;
        
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
        static NSString *CellIdentifier = @"Cell";
        
        NSString *item = [arrItems objectAtIndex:indexPath.row];
        
        UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier forIndexPath:indexPath];
        cell.textLabel.text=item;
        //cell label fontsize & color changed by vishal at friday 9-9-16
        //cell.textLabel.textColor=[Alert colorFromHexString:COLOR_CELL_TEXT];
        cell.textLabel.textColor=[UIColor blackColor];
        cell.textLabel.font=[UIFont fontWithName:FONT_DOSIS_LIGHT size:18];
        cell.backgroundColor=[Alert colorFromHexString:COLOR_CELL_BACKGROUND];
        return cell;
        
}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
        
        [tableView deselectRowAtIndexPath:indexPath animated:YES];

        switch (indexPath.row)
        {
                case 0:
                {
                        ArtCollectionViewController* vc=GET_VIEW_CONTROLLER(kArtCollectionViewController);
                        NSArray* arr=[resPonsedataArray objectForKey:[arrItemsData objectAtIndex:indexPath.row]];
                        vc.arrArtCollectionList=arr;
                        vc.titleString=[arrItems objectAtIndex:indexPath.row];
                        vc.from=@"back";
                        if(arr.count)
                                MOVE_VIEW_CONTROLLER_VIEW_DECK(vc);
                        
                        
                }
                        break;
                case 1:
                {
                        

                        ArtCollectionViewController* vc=GET_VIEW_CONTROLLER(kArtCollectionViewController);
                        NSArray* arr=[resPonsedataArray objectForKey:[arrItemsData objectAtIndex:indexPath.row]];
                        vc.arrArtCollectionList=arr;
                        vc.titleString=[arrItems objectAtIndex:indexPath.row];
                        vc.from=@"back";
                        if(arr.count)
                                MOVE_VIEW_CONTROLLER_VIEW_DECK(vc);
                        
                        
                }
                        break;
                case 2:
                {
                        ArtCollectionViewController* vc=GET_VIEW_CONTROLLER(kArtCollectionViewController);
                        NSArray* arr=[resPonsedataArray objectForKey:[arrItemsData objectAtIndex:indexPath.row]];
                        vc.arrArtCollectionList=arr;
                        vc.titleString=[arrItems objectAtIndex:indexPath.row];
                        vc.from=@"back";
                        if(arr.count)
                                MOVE_VIEW_CONTROLLER_VIEW_DECK(vc);
                }
                        break;
                case 3:
                {
                        BestSellingArtistsViewController* vc=GET_VIEW_CONTROLLER(kBestSellingArtistsViewController);
                        NSArray* arr=[resPonsedataArray objectForKey:[arrItemsData objectAtIndex:indexPath.row]];
                        vc.arrBestSellingArtistsList=arr;
                        vc.titleString=[arrItems objectAtIndex:indexPath.row];
                        vc.from=@"back";
                        if(arr.count)
                                MOVE_VIEW_CONTROLLER_VIEW_DECK(vc);
                        
                        
                        
                }
                        break;
                        
                case 4:
                {
                        
                        ArtCollectionViewController* vc=GET_VIEW_CONTROLLER(kArtCollectionViewController);
                        NSArray* arr=[resPonsedataArray objectForKey:[arrItemsData objectAtIndex:indexPath.row]];
                        vc.arrArtCollectionList=arr;
                        vc.titleString=[arrItems objectAtIndex:indexPath.row];
                        vc.from=@"back";
                        if(arr.count)
                                MOVE_VIEW_CONTROLLER_VIEW_DECK(vc);
                        
                }
                        break;
                case 5:
                {
                        
                        ContactUsViewController* vc=GET_VIEW_CONTROLLER(kContactUsViewController);
                        //                        NSArray* arr=[resPonsedataArray objectForKey:[arrItemsData objectAtIndex:indexPath.row]];
                        vc.titleString=[arrItems objectAtIndex:indexPath.row];
                        vc.from=@"back";
                        //                        if(arr.count)
                        MOVE_VIEW_CONTROLLER_VIEW_DECK(vc);
                        //[self.viewDeckController rightViewPushViewControllerOverCenterController:GET_VIEW_CONTROLLER(kAccountBalanceViewController)];
                        
                }
                        break;
                case 6:
                {
                        
                        AboutUsViewController* vc=GET_VIEW_CONTROLLER(kAboutUsViewController);
//                        NSArray* arr=[resPonsedataArray objectForKey:[arrItemsData objectAtIndex:indexPath.row]];
                        vc.titleString=[arrItems objectAtIndex:indexPath.row];
                        vc.from=@"back";
//                        if(arr.count)
                        MOVE_VIEW_CONTROLLER_VIEW_DECK(vc);

                        
                }
                        break;
                case 7:
                {
                        
                        //[self.viewDeckController rightViewPushViewControllerOverCenterController:GET_VIEW_CONTROLLER(kAboutTalk2GoodViewController)];                }
                        break;
                        
                case 8:
                        {
                                //                        NSMutableDictionary* userData=[[NSUserDefaults standardUserDefaults] objectForKey:@"info"];
                                //                        NSMutableDictionary* data=[NSMutableDictionary dictionary];
                                //                        [data setObject:[userData objectForKey:USER_DATA_MEMBER_ID] forKey:@"member"];
                                //                        [self logoutWS:data];
                        }
                        break;
                default:
                        break;
                }
                        
        }

//        NSLog(@"[ViewController] Show Unity");
//        
//        [[self appDelegate] showUnityWindow];
        
//        OrderDetailViewController* vc=GET_VIEW_CONTROLLER(kOrderDetailViewController);
//        
//        vc.titleString=@"Order Details";
//        vc.from=@"back";
//        
//        MOVE_VIEW_CONTROLLER_VIEW_DECK(vc);
        
}

-(void)hideUnityButton{
        UIView* view=[[[(AppDelegate*)[UIApplication sharedApplication].delegate unityWindow] subviews] lastObject];
        
        UIButton* button=[UIButton buttonWithType:UIButtonTypeSystem];
        [button setTitle:@"Hide Unity" forState:UIControlStateNormal];
        button.frame=CGRectMake(0, 0, 100, 40);
        button.center=view.center;
        button.backgroundColor=[UIColor greenColor];
        [button addTarget:self action:@selector(hideUnity:) forControlEvents:UIControlEventTouchUpInside];
        
        
        [view addSubview:button];
}

-(void)hideUnity:(UIButton*)sender{
        
        NSLog(@"[ViewController] Hide Unity Window");
        
        [[AppDelegate appDelegate] hideUnityWindow];
        //        [UIApplication sharedApplication].statusBarOrientation = UIInterfaceOrientationPortrait;
        
        
}


#pragma mark Setting Methods

- (void)figureOutSecure {
        
        [popper setTextFieldTypeForTextFields:@[@""]];
        
}

- (void)figureOutKeyboardType {
        
//        UIButton *key1 = (UIButton *)[self.view viewWithTag:14];
//        UIButton *key2 = (UIButton *)[self.view viewWithTag:16];
//        UIButton *key3 = (UIButton *)[self.view viewWithTag:18];
//        
//        NSString *k1 = key1.titleLabel.text;
//        NSString *k2 = key2.titleLabel.text;
//        NSString *k3 = key3.titleLabel.text;
        
        keyboardTypes = @[@"DEFAULT",
                          @"ASCIICAPABLE",
                          @"NUMBERSANDPUNCTUATION",
                          @"URL",
                          @"NUMBER",
                          @"PHONE",
                          @"NAMEPHONE",
                          @"EMAIL",
                          @"DECIMAL",
                          @"TWITTER",
                          @"WEBSEARCH"];
        
        
//        if (setKey1 && !setKey2 && !setKey3) {
//                [popper setKeyboardTypeForTextFields:@[k1]];
//        }
//        else if (setKey1 && setKey2 && !setKey3) {
//                [popper setKeyboardTypeForTextFields:@[k1, k2]];
//        }
//        else if (setKey1 && setKey2 && setKey3) {
//                [popper setKeyboardTypeForTextFields:@[k1, k2, k3]];
//        }
//        else if (setKey1 && !setKey2 && setKey3) {
//                [popper setKeyboardTypeForTextFields:@[k1, @"", k3]];
//        }
//        else if (!setKey1 && setKey2 && !setKey3) {
//                [popper setKeyboardTypeForTextFields:@[@"", k2]];
//        }
//        else if (!setKey1 && !setKey2 && setKey3) {
//                [popper setKeyboardTypeForTextFields:@[@"", @"", k3]];
//        }
//        else if (!setKey1 && !setKey2 && !setKey3) {
                //none
        [popper setKeyboardTypeForTextFields:@[@"EMAIL"]];
//        }
//        else if (setKey1 && !setKey2 && setKey3) {
//                [popper setKeyboardTypeForTextFields:@[k1, @"", k3]];
//        }
//        else if (!setKey1 && setKey2 && setKey3) {
//                [popper setKeyboardTypeForTextFields:@[@"", k2, k3]];
//        }
        
        
        
}

- (void)figureOutTransitions {
        
//        UIButton *inBtn = (UIButton *)[self.view viewWithTag:99];
//        UIButton *outBtn = (UIButton *)[self.view viewWithTag:100];
//        
//        NSString *inTitle = inBtn.titleLabel.text;
//        NSString *outTitle = outBtn.titleLabel.text;
        
        //inTitle
//        if ([inTitle isEqualToString:@"BounceFromCenter"]) {
                incomingType = PopupIncomingTransitionTypeBounceFromCenter;
        /*
        }
        else if ([inTitle isEqualToString:@"SlideFromLeft"]) {
                incomingType = PopupIncomingTransitionTypeSlideFromLeft;
        }
        else if ([inTitle isEqualToString:@"SlideFromTop"]) {
                incomingType = PopupIncomingTransitionTypeSlideFromTop;
        }
        else if ([inTitle isEqualToString:@"SlideFromBottom"]) {
                incomingType = PopupIncomingTransitionTypeSlideFromBottom;
        }
        else if ([inTitle isEqualToString:@"SlideFromRight"]) {
                incomingType = PopupIncomingTransitionTypeSlideFromRight;
        }
        else if ([inTitle isEqualToString:@"EaseFromCenter"]) {
                incomingType = PopupIncomingTransitionTypeEaseFromCenter;
        }
        else if ([inTitle isEqualToString:@"AppearCenter"]) {
                incomingType = PopupIncomingTransitionTypeAppearCenter;
        }
        else if ([inTitle isEqualToString:@"FallWithGravity"]) {
                incomingType = PopupIncomingTransitionTypeFallWithGravity;
        }
        else if ([inTitle isEqualToString:@"GhostAppear"]) {
                incomingType = PopupIncomingTransitionTypeGhostAppear;
        }
        else if ([inTitle isEqualToString:@"ShrinkAppear"]) {
                incomingType = PopupIncomingTransitionTypeShrinkAppear;
        }
        else {
                incomingType = PopupIncomingTransitionTypeFallWithGravity;
        }
         */
        
        //outTitle
      //  if ([outTitle isEqualToString:@"BounceFromCenter"]) {
                outgoingType = PopupOutgoingTransitionTypeBounceFromCenter;
        /*
        }
        else if ([outTitle isEqualToString:@"SlideToLeft"]) {
                outgoingType = PopupOutgoingTransitionTypeSlideToLeft;
        }
        else if ([outTitle isEqualToString:@"SlideToTop"]) {
                outgoingType = PopupOutgoingTransitionTypeSlideToTop;
        }
        else if ([outTitle isEqualToString:@"SlideToBottom"]) {
                outgoingType = PopupOutgoingTransitionTypeSlideToBottom;
        }
        else if ([outTitle isEqualToString:@"SlideToRight"]) {
                outgoingType = PopupOutgoingTransitionTypeSlideToRight;
        }
        else if ([outTitle isEqualToString:@"EaseToCenter"]) {
                outgoingType = PopupOutgoingTransitionTypeEaseToCenter;
        }
        else if ([outTitle isEqualToString:@"DisappearCenter"]) {
                outgoingType = PopupOutgoingTransitionTypeDisappearCenter;
        }
        else if ([outTitle isEqualToString:@"FallWithGravity"]) {
                outgoingType = PopupOutgoingTransitionTypeFallWithGravity;
        }
        else if ([inTitle isEqualToString:@"GhostDisappear"]) {
                outgoingType = PopupOutgoingTransitionTypeGhostDisappear;
        }
        else if ([outTitle isEqualToString:@"GrowDisappear"]) {
                outgoingType = PopupOutgoingTransitionTypeGrowDisappear;
        }
        else {
                outgoingType = PopupOutgoingTransitionTypeBounceFromCenter;
        }
         */
}

- (void)setBlur:(id)sender {
        
        //UIButton *button = (UIButton *)sender;
//        UIButton *button5 = (UIButton *)[self.view viewWithTag:5];
//        UIButton *button6 = (UIButton *)[self.view viewWithTag:6];
//        UIButton *button7 = (UIButton *)[self.view viewWithTag:7];
//        UIButton *button8 = (UIButton *)[self.view viewWithTag:8];
        
//        if ([button tag] == 5) {
//                if ([[button backgroundColor] isEqual:[UIColor lightGrayColor]]) {
//                        [button setBackgroundColor:[UIColor darkGrayColor]];
                        blurType = PopupBackGroundBlurTypeDark;
        /*
                }
                else {
                        blurType = PopupBackGroundBlurTypeNone;
                        [button setBackgroundColor:[UIColor lightGrayColor]];
                }
                [button6 setBackgroundColor:[UIColor lightGrayColor]];
                [button7 setBackgroundColor:[UIColor lightGrayColor]];
                [button8 setBackgroundColor:[UIColor lightGrayColor]];
        }
        else if ([button tag] == 6) {
                if ([[button backgroundColor] isEqual:[UIColor lightGrayColor]]) {
                        [button setBackgroundColor:[UIColor darkGrayColor]];
                        blurType = PopupBackGroundBlurTypeLight;
                }
                else {
                        [button setBackgroundColor:[UIColor lightGrayColor]];
                        blurType = PopupBackGroundBlurTypeNone;
                }
                [button5 setBackgroundColor:[UIColor lightGrayColor]];
                [button7 setBackgroundColor:[UIColor lightGrayColor]];
                [button8 setBackgroundColor:[UIColor lightGrayColor]];
        }
        else if ([button tag] == 7) {
                if ([[button backgroundColor] isEqual:[UIColor lightGrayColor]]) {
                        [button setBackgroundColor:[UIColor darkGrayColor]];
                        blurType = PopupBackGroundBlurTypeExtraLight;
                }
                else {
                        [button setBackgroundColor:[UIColor lightGrayColor]];
                        blurType = PopupBackGroundBlurTypeNone;
                }
                [button5 setBackgroundColor:[UIColor lightGrayColor]];
                [button6 setBackgroundColor:[UIColor lightGrayColor]];
                [button8 setBackgroundColor:[UIColor lightGrayColor]];
        }
        else if ([button tag] == 8) {
                if ([[button backgroundColor] isEqual:[UIColor lightGrayColor]]) {
                        [button setBackgroundColor:[UIColor darkGrayColor]];
                        blurType = PopupBackGroundBlurTypeNone;
                }
                else {
                        [button setBackgroundColor:[UIColor lightGrayColor]];
                        blurType = PopupBackGroundBlurTypeNone;
                }
                [button5 setBackgroundColor:[UIColor lightGrayColor]];
                [button6 setBackgroundColor:[UIColor lightGrayColor]];
                [button7 setBackgroundColor:[UIColor lightGrayColor]];
        }
         */
        
        
}

- (void)dictionary:(NSMutableDictionary *)dictionary forpopup:(Popup *)popup stringsFromTextFields:(NSArray *)stringArray {
        isEmailSubscribe=NO;
        
        NSString *textFromBox1 = [stringArray objectAtIndex:0];
        
        isEmailSubscribe=[Alert validationEmail:[Alert trimString:textFromBox1]];
        subscribeEmail=[Alert trimString:textFromBox1];
        
//        NSString *textFromBox2 = [stringArray objectAtIndex:1];
//        NSString *textFromBox3 = [stringArray objectAtIndex:2];
        
        NSLog(@"valid is %d [%@]",isEmailSubscribe,textFromBox1);
        
}
-(void)buttonTittle:(NSString *)title selectedIndex:(int)index{
        
}

-(void)popup:(id)sender{
        
        //UIButton* button=(UIButton*)sender;
        
        
        popper = [[Popup alloc] initWithTitle:@"SUBSCRIBE OUR NEWSLETTER"
                                            subTitle:@""
                               textFieldPlaceholders:@[@"Enter your email address"]
                                         cancelTitle:@"CANCEL"
                                        successTitle:@"SUBSCRIBE"
                                         cancelBlock:^{
                                                 NSLog(@"Cancel block 1");
                                                 
                                         } successBlock:^{
                                                 NSLog(@"Success block 1");
                                                 NSString* message=@"Please enter valid email address !";
                                                 
                                                 if(isEmailSubscribe){
                                                         
                                                         [self subscribeWebService];
                                                 }
                                                 else{
                                                         [Alert alertWithMessage:message
                                                                      navigation:self.navigationController
                                                                        gotoBack:NO animation:YES second:2.0];
                                                 }
                                         }];

        [self figureOutSecure];
        [self figureOutTransitions];
        [self figureOutKeyboardType];
        [self setBlur:sender];
        
        [popper setDelegate:self];
        [popper setBackgroundBlurType:blurType];
        [popper setIncomingTransition:incomingType];
        [popper setOutgoingTransition:outgoingType];
        [popper setRoundedCorners:YES];
        [popper showPopup];
        
}

- (IBAction)subcribe:(id)sender {
        
        //[self popover:sender];
        
        [self popup:sender];
        
        
}


@end
